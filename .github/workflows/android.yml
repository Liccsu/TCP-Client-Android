name: Android Release CI

on:
  push:
    branches:
      - master
    tags:
      - 'v*' # 例如: v1.0, v1.0.0, v1.0.0-beta
  workflow_dispatch: # 允许手动触发

jobs:
  build_and_release:
    name: Build and Release Signed APK
    runs-on: ubuntu-latest
    permissions:
      contents: write # 创建 Release 和上传附件所必需的权限

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Check for required secrets
      id: check_secrets
      env:
        KEY_STORE_B64: ${{ secrets.SIGNING_KEY_STORE_BASE64 }}
        STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
      run: |
        if [ -n "$KEY_STORE_B64" ] && \
           [ -n "$STORE_PASSWORD" ] && \
           [ -n "$KEY_ALIAS" ] && \
           [ -n "$KEY_PASSWORD" ]; then
          echo "secrets_present=true" >> $GITHUB_OUTPUT
        else
          echo "secrets_present=false" >> $GITHUB_OUTPUT
          echo "::warning::One or more signing secrets are missing. An unsigned APK will be built, but no GitHub Release will be created."
        fi

    - name: Decode Keystore
      id: decode_keystore
      if: steps.check_secrets.outputs.secrets_present == 'true'
      run: |
        echo "Decoding keystore..."
        store_file_path="${{ runner.temp }}/keystore.jks"
        echo "${{ secrets.SIGNING_KEY_STORE_BASE64 }}" | base64 --decode > "$store_file_path"
        echo "store_file=$store_file_path" >> $GITHUB_OUTPUT

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build APK
      id: build_apk
      env:
        SIGNING_STORE_FILE: ${{ steps.decode_keystore.outputs.store_file }}
        SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
        SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
      run: |
        ./gradlew assembleRelease
        echo "APK build process completed."
        
        apk_dir="app/build/outputs/apk/release"
        echo "apk_directory_path=$apk_dir" >> $GITHUB_OUTPUT
        
        first_apk_path=$(find "$apk_dir" -name "*.apk" -type f -print -quit)
        
        if [ -n "$first_apk_path" ]; then
          apk_filename=$(basename "$first_apk_path")
          echo "apk_name_example=$apk_filename" >> $GITHUB_OUTPUT
          echo "Found example APK: $apk_filename"
        else
          echo "::warning::No APK file found in $apk_dir."
          echo "apk_name_example=" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v2.0.6
      with:
        name: Release ${{ github.ref_name }}
        tag_name: ${{ github.ref_name }}
        body: |
          Automated signed release for version ${{ github.ref_name }}.
          ${{ steps.build_apk.outputs.apk_name_example && format('APK: {0}', steps.build_apk.outputs.apk_name_example) || 'The signed APK is attached as an asset below.' }}
          
          All built APKs from the `${{ steps.build_apk.outputs.apk_directory_path }}` directory are included.
        files: |
          ${{ steps.build_apk.outputs.apk_directory_path }}/*.apk
          app/build/outputs/mapping/release/mapping.txt # 同时上传 ProGuard/R8 的 mapping 文件，非常重要！
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
